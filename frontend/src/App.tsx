import * as React from "react";
import "katex/dist/katex.min.css";
import { InlineMath, BlockMath } from "react-katex";
import { Landing } from "./Landing";
import { Cat, Dog } from "./Util";
import { ThemeProvider } from "styled-components";
import { space, layout, color, typography } from "styled-system";
import { jsx } from "theme-ui";
import ReactD3 from "react-d3-components";
import ReactFullpage from "@fullpage/react-fullpage";

import styled from "styled-components";
import theme from "./theme";

const Box = styled.div`
  ${space}
  ${layout}
  ${typography}
  ${color}
`;

const ascii = "\\int_0^\\infty x^2 dx";
const Definition = () => (
  <Box color="primary">
    Here is some math <InlineMath math={ascii} /> and it's inline. Here is some
    block math:
    <BlockMath math={ascii}></BlockMath>
  </Box>
);

const Story = () => (
  <Box color="primary">
    A <Cat /> wants to go to a <Dog />
    -only Halloween party, so she went to the sorceress for help. The sorceress
    specializes in magically generating
    <Dog />
    -looking cats. The key to getting into the party is to pass the <Dog />
    -ness inspection by another powerful sorceress, so the disguise has to be
    indistinguishable from other <Dog /> guests.
  </Box>
);

const Concept = () => (
  <p>
    Generative Adversarial Networks comprise of two models:
    <li>
      The first model is the Generator (Gina) and it aims to generate new data
      similar to the expected one. The Generator could be assimilated to a human
      art forger, which creates fake works of art.
    </li>
    <li>
      The second model is the Discriminator (Dorothy). This model’s goal is to
      recognize if an input data is ‘real’ — belongs to the original dataset —
      or if it is ‘fake’ — generated by a forger. In this scenario, a
      Discriminator is analogous to the police (or an art expert), which tries
      to detect artworks as truthful or fraud.
    </li>
  </p>
);

const Math = () => (
  <p>
    <li>
      Nash equilibrium: “GAN is based on the zero-sum non-cooperative game. In
      short, if one wins the other loses. A zero-sum game is also called
      minimax. Your opponent wants to maximize its actions and your actions are
      to minimize them. In game theory, the GAN model converges when the
      discriminator and the generator reach a Nash equilibrium. This is the
      optimal point for the minimax equation below.”{" "}
    </li>
    <li>
      The problem of convergence and different measures of divergence, along
      with the fact that real GANs are _not_ optimizing towards NE, but rather
      approximating and minimizing (some measure of) divergence.
    </li>
  </p>
);

const FullPage = () => (
  <ReactFullpage
    //fullpage options
    licenseKey={"YOUR_KEY_HERE"}
    scrollingSpeed={1000} /* Options here */
    render={() => {
      return (
        <ReactFullpage.Wrapper>
          <Landing></Landing>
          <ThemeProvider theme={theme}>
            <div className="section">
              <Story />
              <Concept />
              <Definition />
              <Math />
              {/* <BarChart
            data={data}
            width={400}
            height={400}
            margin={{ top: 10, bottom: 50, left: 50, right: 10 }}
          /> */}
            </div>
          </ThemeProvider>
        </ReactFullpage.Wrapper>
      );
    }}
  />
);

// var BarChart = ReactD3.BarChart;

var data = [
  {
    label: "somethingA",
    values: [
      { x: "SomethingA", y: 10 },
      { x: "SomethingB", y: 4 },
      { x: "SomethingC", y: 3 }
    ]
  }
];

class App extends React.Component {
  public render() {
    return (
      <>
        <FullPage />;
      </>
    );
  }
}

export default App;
